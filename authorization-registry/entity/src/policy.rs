//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::delegation_evidence::ResourceRule;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "policy")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub identifiers: Vec<String>,
    #[sea_orm(column_type = "Text")]
    pub resource_type: String,
    pub attributes: Vec<String>,
    pub actions: Vec<String>,
    pub service_providers: Vec<String>,
    pub policy_set: Uuid,
    #[sea_orm(column_type = "JsonBinary")]
    pub rules: Vec<ResourceRule>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::policy_set::Entity",
        from = "Column::PolicySet",
        to = "super::policy_set::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PolicySet,
}

impl Related<super::policy_set::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PolicySet.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
